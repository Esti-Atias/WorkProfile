networks:
  frontend_network:
  backend_network:

volumes:
  db_data:

services:
  db:
    image: mysql:8.0
    container_name: docker-compose-db-1
    restart: always
    volumes:
      - db_data:/var/lib/mysql
      - ./src/init.sql:/tmp/init.sql
    environment:
      MYSQL_ROOT_PASSWORD: flaskapp
      MYSQL_DATABASE: exampleDb
      MYSQL_USER: flaskapp
      MYSQL_PASSWORD: flaskapp
    ports:
      - "3306:3306"
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root", "-pflaskapp"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    command: |
      bash -c "
      # אתחול ספריית הנתונים אם היא ריקה. זה קריטי כשאנחנו עוקפים את ה-entrypoint הדיפולטיבי.
      if [ ! -d /var/lib/mysql/mysql ]; then
        echo 'Initializing MySQL data directory...'
        mysqld --initialize-insecure --user=mysql --datadir=/var/lib/mysql
        echo 'MySQL data directory initialized.'
      else
        echo 'MySQL data directory already exists. Skipping initialization.'
      fi

      # הפעלת שרת MySQL ברקע
      mysqld &
      MYSQL_PID=$!
      
      # המתנה עד ש-MySQL יהיה מוכן לחיבורים
      until mysqladmin ping -h localhost --silent; do
        echo 'waiting for mysqld to be connectable...'
        sleep 2
      done
      
      echo 'mysqld is connectable. Executing init.sql...'
      # הרצת סקריפט init.sql באמצעות לקוח mysql
      # יש להשתמש בגרשיים סביב הסיסמה כדי למנוע בעיות עם תווים מיוחדים
      mysql -u root -p\"$$MYSQL_ROOT_PASSWORD\" < /tmp/init.sql &&
      echo 'init.sql executed successfully' || { echo 'ERROR: init.sql failed!'; exit 1; }
      
      # המתנה לתהליך ה-mysqld הראשי כדי שהקונטיינר יישאר פעיל
      wait $MYSQL_PID
      "

  app:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: docker-compose-app-1
    restart: always
    environment:
      DB_HOST: db
      DB_USER: flaskapp
      DB_PASS: flaskapp
      DB_NAME: exampleDb
      APP_PORT: 5000
    ports:
      - "5000:5000"
    networks:
      - backend_network
      - frontend_network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 60s

  nginx:
    image: nginx:latest
    container_name: docker-compose-nginx-1
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - frontend_network
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 10s
      timeout: 5s
      retries: 5
